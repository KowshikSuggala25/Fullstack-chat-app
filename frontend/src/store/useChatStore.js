import { create } from "zustand";
import toast from "react-hot-toast";
import { axiosInstance } from "../lib/axios";
import { useAuthStore } from "./useAuthStore";
import axios from "axios";

export const useChatStore = create((set, get) => ({
Â  messages: [],
Â  users: [],
Â  selectedUser: null,
Â  isUsersLoading: false,
Â  isMessagesLoading: false,
Â  sendingMessages: new Set(),
Â  deletingMessages: new Set(),

Â  isSidebarOpen: true,
Â  setIsSidebarOpen: (isOpen) => set({ isSidebarOpen: isOpen }),

Â  getUsers: async () => {
Â  Â  set({ isUsersLoading: true });
Â  Â  try {
Â  Â  Â  const res = await axios.get("/api/messages/users", { withCredentials: true });
Â  Â  Â  set({ users: res.data });
Â  Â  } catch (err) {
Â  Â  Â  toast.error("Failed to fetch users");
Â  Â  Â  console.error("Fetch users error:", err);
Â  Â  } finally {
Â  Â  Â  set({ isUsersLoading: false });
Â  Â  }
Â  },

Â  getMessages: async (userId) => {
Â  Â  if (!userId) return toast.error("No user selected");
Â  Â  set({ isMessagesLoading: true });
Â  Â  try {
Â  Â  Â  const res = await axiosInstance.get(`/messages/${userId}`);
Â  Â  Â  set({ messages: res.data });
Â  Â  } catch (error) {
Â  Â  Â  toast.error("Failed to fetch messages");
Â  Â  Â  console.error("Get messages error:", error);
Â  Â  } finally {
Â  Â  Â  set({ isMessagesLoading: false });
Â  Â  }
Â  },

Â  sendMessage: async (messageData, previewData = {}) => {
Â  Â  const { selectedUser } = get();
Â  Â  const { authUser, socket } = useAuthStore.getState();

Â  Â  if (!selectedUser || !authUser) {
Â  Â  Â  toast.error("No user selected");
Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  const isFormData = messageData instanceof FormData;
Â  Â  const optimisticId = `temp-${Date.now()}`;
Â  Â  
Â  Â  let optimisticMessage;
Â  Â  if (isFormData) {
Â  Â  Â  optimisticMessage = {
Â  Â  Â  Â  _id: optimisticId,
Â  Â  Â  Â  senderId: authUser._id,
Â  Â  Â  Â  receiverId: selectedUser._id,
Â  Â  Â  Â  text: messageData.get('text') || null,
Â  Â  Â  Â  image: previewData.image || null,
Â  Â  Â  Â  video: previewData.video || null,
Â  Â  Â  Â  createdAt: new Date().toISOString(),
Â  Â  Â  Â  reactions: [],
Â  Â  Â  Â  deleted: false,
Â  Â  Â  Â  isOptimistic: true,
Â  Â  Â  Â  isSending: true
Â  Â  Â  };
Â  Â  } else {
Â  Â  Â  optimisticMessage = {
Â  Â  Â  Â  _id: optimisticId,
Â  Â  Â  Â  senderId: authUser._id,
Â  Â  Â  Â  receiverId: selectedUser._id,
Â  Â  Â  Â  text: messageData.text || null,
Â  Â  Â  Â  sticker: messageData.sticker || null,
Â  Â  Â  Â  gif: messageData.gif || null,
Â  Â  Â  Â  createdAt: new Date().toISOString(),
Â  Â  Â  Â  reactions: [],
Â  Â  Â  Â  deleted: false,
Â  Â  Â  Â  isOptimistic: true,
Â  Â  Â  Â  isSending: true
Â  Â  Â  };
Â  Â  }

Â  Â  set(state => {
Â  Â  Â  const newSendingMessages = state.sendingMessages instanceof Set ? new Set(state.sendingMessages) : new Set();
Â  Â  Â  newSendingMessages.add(optimisticId);
Â  Â  Â  return {
Â  Â  Â  Â  messages: [...state.messages, optimisticMessage],
Â  Â  Â  Â  sendingMessages: newSendingMessages,
Â  Â  Â  };
Â  Â  });

Â  Â  try {
Â  Â  Â  const config = {
Â  Â  Â  Â  headers: isFormData ? { 'Content-Type': 'multipart/form-data' } : { 'Content-Type': 'application/json' }
Â  Â  Â  };

Â  Â  Â  const res = await axiosInstance.post(
Â  Â  Â  Â  `/messages/send/${selectedUser._id}`,
Â  Â  Â  Â  isFormData ? messageData : messageData,
Â  Â  Â  Â  config
Â  Â  Â  );
Â  Â  Â  
Â  Â  Â  const savedMessage = res.data;

Â  Â  Â  set(state => {
Â  Â  Â  Â  const newSendingMessages = state.sendingMessages instanceof Set ? new Set(state.sendingMessages) : new Set();
Â  Â  Â  Â  newSendingMessages.delete(optimisticId);
Â  Â  Â  Â  
Â  Â  Â  Â  // âœ… FIX: This logic is now handled by the 'newMessage' socket event on the client. // ðŸ”´ Change: Commented out the client-side state update to prevent duplicates.
Â  Â  Â  Â  // The server will emit the new message, and the 'newMessage' socket listener will handle the state update.
Â  Â  Â  Â  /*
Â  Â  Â  Â  const updatedMessages = state.messages.map(msg => {
Â  Â  Â  Â  Â  if (msg._id === optimisticId) {
Â  Â  Â  Â  Â  Â  if (msg.image && msg.image.startsWith('blob:')) {
Â  Â  Â  Â  Â  Â  Â  URL.revokeObjectURL(msg.image);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  if (msg.video && msg.video.startsWith('blob:')) {
Â  Â  Â  Â  Â  Â  Â  URL.revokeObjectURL(msg.video);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return savedMessage;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return msg;
Â  Â  Â  Â  });
Â  Â  Â  Â  */
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  messages: state.messages,
Â  Â  Â  Â  Â  sendingMessages: newSendingMessages,
Â  Â  Â  Â  };
Â  Â  Â  });

Â  Â  Â  // âœ… FIX: This emit is not necessary, as the server will broadcast the message after saving it. // ðŸ”´ Change: Removed redundant socket.emit("sendMessage")
Â  Â  Â  // if (socket) {
Â  Â  Â  // Â  socket.emit("sendMessage", {
Â  Â  Â  // Â  Â  receiverId: selectedUser._id,
Â  Â  Â  // Â  Â  message: savedMessage
Â  Â  Â  // Â  });
Â  Â  Â  // }

Â  Â  } catch (error) {
Â  Â  Â  set(state => {
Â  Â  Â  Â  const newSendingMessages = state.sendingMessages instanceof Set ? new Set(state.sendingMessages) : new Set();
Â  Â  Â  Â  newSendingMessages.delete(optimisticId);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  messages: state.messages.filter(msg => msg._id !== optimisticId),
Â  Â  Â  Â  Â  sendingMessages: newSendingMessages,
Â  Â  Â  Â  };
Â  Â  Â  });
Â  Â  Â  toast.error("Failed to send message");
Â  Â  Â  console.error("Send message error:", error);
Â  Â  }
Â  },

Â  deleteMessage: async (messageId) => {
Â  Â  const { messages } = get();
Â  Â  const messageToDelete = messages.find(m => m._id === messageId);
Â  Â  if (!messageToDelete) return;

Â  Â  set(state => {
Â  Â  Â  const newDeletingMessages = state.deletingMessages instanceof Set ? new Set(state.deletingMessages) : new Set();
Â  Â  Â  newDeletingMessages.add(messageId);
Â  Â  Â  return {
Â  Â  Â  Â  messages: state.messages.map(m =>
Â  Â  Â  Â  Â  m._id === messageId
Â  Â  Â  Â  Â  Â  ? { ...m, isDeleting: true }
Â  Â  Â  Â  Â  Â  : m
Â  Â  Â  Â  ),
Â  Â  Â  Â  deletingMessages: newDeletingMessages,
Â  Â  Â  };
Â  Â  });

Â  Â  try {
Â  Â  Â  await axiosInstance.delete(`/messages/${messageId}`);
Â  Â  Â  // âœ… FIX: No need to update state here. The socket event "messageDeleted" will handle it. // ðŸ”´ Change: Removed redundant state update.
Â  Â  Â  // We only need to remove the deleting state after the API call succeeds.
Â  Â  Â  set(state => {
Â  Â  Â  Â  const newDeletingMessages = state.deletingMessages instanceof Set ? new Set(state.deletingMessages) : new Set();
Â  Â  Â  Â  newDeletingMessages.delete(messageId);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  deletingMessages: newDeletingMessages,
Â  Â  Â  Â  };
Â  Â  Â  });
Â  Â  } catch (error) {
Â  Â  Â  set(state => {
Â  Â  Â  Â  const newDeletingMessages = state.deletingMessages instanceof Set ? new Set(state.deletingMessages) : new Set();
Â  Â  Â  Â  newDeletingMessages.delete(messageId);
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  messages: state.messages.map(m =>
Â  Â  Â  Â  Â  Â  m._id === messageId
Â  Â  Â  Â  Â  Â  Â  ? { ...m, isDeleting: false }
Â  Â  Â  Â  Â  Â  Â  : m
Â  Â  Â  Â  Â  ),
Â  Â  Â  Â  Â  deletingMessages: newDeletingMessages,
Â  Â  Â  Â  };
Â  Â  Â  });
Â  Â  Â  toast.error("Failed to delete message");
Â  Â  Â  console.error("Delete message error:", error);
Â  Â  }
Â  },

Â  subscribeToMessages: () => {
Â  Â  const socket = useAuthStore.getState().socket;
Â  Â  if (!socket) return;

Â  Â  socket.on("newMessage", (newMessage) => {
Â  Â  Â  const { selectedUser } = get(); // âœ… FIX: Get the latest state
Â  Â  Â  const isMyMessage = newMessage.senderId === useAuthStore.getState().authUser._id; // âœ… FIX: Check if the message is from me
Â  Â  Â  const messageExists = get().messages.some(m => m._id === newMessage._id); // âœ… FIX: Check if the message already exists

Â  Â  Â  if (!selectedUser) return;
Â  Â  Â  
Â  Â  Â  // Only update if the message is for the currently selected chat and it's a new message
Â  Â  Â  if ((newMessage.senderId === selectedUser._id || isMyMessage) && !messageExists) {
Â  Â  Â  Â  // Use set with a function to ensure we're using the latest state
Â  Â  Â  Â  set(state => ({
Â  Â  Â  Â  Â  messages: [...state.messages.filter(m => m._id !== newMessage.tempId), newMessage] // âœ… FIX: Remove optimistic message and add real one
Â  Â  Â  Â  }));
Â  Â  Â  } else if (isMyMessage && messageExists) {
Â  Â  Â  Â  // If the message is mine and exists, replace the optimistic message with the real one.
Â  Â  Â  Â  set(state => ({
Â  Â  Â  Â  Â  messages: state.messages.map(m => m._id === newMessage.tempId ? newMessage : m)
Â  Â  Â  Â  }));
Â  Â  Â  }
Â  Â  });

Â  Â  socket.on("messageDeleted", ({ messageId }) => { // âœ… FIX: Destructure just the messageId
Â  Â  Â  set(state => ({
Â  Â  Â  Â  messages: state.messages.map(m =>
Â  Â  Â  Â  Â  m._id === messageId
Â  Â  Â  Â  Â  Â  ? { ...m, deleted: true, text: "This message was deleted.", image: null, video: null, sticker: null, gif: null } // âœ… FIX: Set text and clear other content for the recipient
Â  Â  Â  Â  Â  Â  : m
Â  Â  Â  Â  )
Â  Â  Â  }));
Â  Â  });

Â  Â  socket.on("messageReacted", ({ messageId, reactions }) => {
Â  Â  Â  set(state => ({
Â  Â  Â  Â  messages: state.messages.map(m =>
Â  Â  Â  Â  Â  m._id === messageId
Â  Â  Â  Â  Â  Â  ? { ...m, reactions }
Â  Â  Â  Â  Â  Â  : m
Â  Â  Â  Â  )
Â  Â  Â  }));
Â  Â  });
Â  },

Â  unsubscribeFromMessages: () => {
Â  Â  const socket = useAuthStore.getState().socket;
Â  Â  if (!socket) return;
Â  Â  socket.off("newMessage");
Â  Â  socket.off("messageDeleted");
Â  Â  socket.off("messageReacted");
Â  },

Â  setSelectedUser: (selectedUser) => set({ selectedUser }),

Â  addReaction: async (messageId, emoji) => {
Â  Â  const { authUser } = useAuthStore.getState();
Â  Â  if (!authUser) return;

Â  Â  set(state => ({
Â  Â  Â  messages: state.messages.map(m => {
Â  Â  Â  Â  if (m._id === messageId) {
Â  Â  Â  Â  Â  const existingReactionIndex = m.reactions.findIndex(r => r.userId._id === authUser._id);
Â  Â  Â  Â  Â  let newReactions = [...m.reactions];
Â  Â  Â  Â  Â  if (existingReactionIndex !== -1) {
Â  Â  Â  Â  Â  Â  if (newReactions[existingReactionIndex].emoji === emoji) {
Â  Â  Â  Â  Â  Â  Â  newReactions.splice(existingReactionIndex, 1);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  newReactions[existingReactionIndex] = { ...newReactions[existingReactionIndex], emoji };
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  newReactions.push({
Â  Â  Â  Â  Â  Â  Â  userId: { _id: authUser._id, fullName: authUser.fullName, profilePic: authUser.profilePic },
Â  Â  Â  Â  Â  Â  Â  emoji
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return { ...m, reactions: newReactions };
Â  Â  Â  Â  }
Â  Â  Â  Â  return m;
Â  Â  Â  })
Â  Â  }));

Â  Â  try {
Â  Â  Â  await axios.post(`/api/messages/${messageId}/react`, { emoji }, { withCredentials: true });
Â  Â  } catch (error) {
Â  Â  Â  const { selectedUser } = get();
Â  Â  Â  if (selectedUser) {
Â  Â  Â  Â  get().getMessages(selectedUser._id);
Â  Â  Â  }
Â  Â  Â  toast.error("Failed to add reaction");
Â  Â  }
Â  }
}));