import User from "../models/user.model.js";
import Message from "../models/message.model.js";
import cloudinary from "../lib/cloudinary.js";
import { getReceiverSocketId, io } from "../lib/socket.js";
import DatauriParser from "datauri/parser.js";
import path from "path";

export const getUsersForSidebar = async (req, res) => {
Â  try {
Â  Â  const users = await User.find({ _id: { $ne: req.user._id } }).select("-password");
Â  Â  res.status(200).json(users);
Â  } catch (error) {
Â  Â  console.error("Sidebar error:", error);
Â  Â  res.status(500).json({ error: "Internal server error" });
Â  }
};

export const getMessages = async (req, res) => {
Â  try {
Â  Â  const myId = req.user._id;
Â  Â  const userToChatId = req.params.id;

Â  Â  const messages = await Message.find({
Â  Â  Â  $or: [
Â  Â  Â  Â  { senderId: myId, receiverId: userToChatId },
Â  Â  Â  Â  { senderId: userToChatId, receiverId: myId },
Â  Â  Â  ],
Â  Â  }).sort({ createdAt: 1 });

Â  Â  for (let msg of messages) {
Â  Â  Â  await msg.populate({
Â  Â  Â  Â  path: "reactions.userId",
Â  Â  Â  Â  select: "fullName profilePic",
Â  Â  Â  });
Â  Â  }

Â  Â  res.status(200).json(messages);
Â  } catch (error) {
Â  Â  console.error("Get messages error:", error);
Â  Â  res.status(500).json({ error: "Internal server error" });
Â  }
};

export const sendMessage = async (req, res) => {
Â  try {
Â  Â  const { text, sticker, gif } = req.body;
Â  Â  const receiverId = req.params.id;
Â  Â  const senderId = req.user._id;

Â  Â  let mediaUrl = null;
Â  Â  let resourceType = 'text';

Â  Â  if (req.file) {
Â  Â  Â  const parser = new DatauriParser();
Â  Â  Â  
Â  Â  Â  const fileData = parser.format(path.extname(req.file.originalname).toString(), req.file.buffer);

Â  Â  Â  const uploadOptions = {};
Â  Â  Â  
Â  Â  Â  if (req.file.mimetype.startsWith('video/')) {
Â  Â  Â  Â  uploadOptions.resource_type = 'video';
Â  Â  Â  Â  resourceType = 'video';
Â  Â  Â  } else if (req.file.mimetype.startsWith('image/')) {
Â  Â  Â  Â  uploadOptions.resource_type = 'image';
Â  Â  Â  Â  resourceType = 'image';
Â  Â  Â  }

Â  Â  Â  try {
Â  Â  Â  Â  const result = await cloudinary.uploader.upload(fileData.content, uploadOptions);
Â  Â  Â  Â  if (result && result.secure_url) {
Â  Â  Â  Â  Â  mediaUrl = result.secure_url;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  console.error("Cloudinary upload failed: secure_url not found in result");
Â  Â  Â  Â  Â  return res.status(500).json({ error: "Failed to upload media to Cloudinary." });
Â  Â  Â  Â  }
Â  Â  Â  } catch (uploadError) {
Â  Â  Â  Â  console.error("Cloudinary upload failed:", uploadError);
Â  Â  Â  Â  return res.status(500).json({ error: "Failed to upload media to Cloudinary.", details: uploadError.message });
Â  Â  Â  }
Â  Â  }

Â  Â  if (!text && !mediaUrl && !sticker && !gif) {
Â  Â  Â  return res.status(400).json({ error: "Message must have content." });
Â  Â  }

Â  Â  const newMessage = new Message({
Â  Â  Â  senderId,
Â  Â  Â  receiverId,
Â  Â  Â  text: text || null,
Â  Â  Â  image: resourceType === 'image' ? mediaUrl : null,
Â  Â  Â  video: resourceType === 'video' ? mediaUrl : null,
Â  Â  Â  sticker: sticker || null,
Â  Â  Â  gif: gif || null,
Â  Â  });

Â  Â  await newMessage.save();

Â  Â  const populatedMessage = await Message.findById(newMessage._id)
Â  Â  Â  .populate("senderId", "fullName username profilePic")
Â  Â  Â  .populate("receiverId", "fullName username profilePic")
Â  Â  Â  .populate({
Â  Â  Â  Â  path: "reactions.userId",
Â  Â  Â  Â  select: "fullName profilePic",
Â  Â  Â  });

Â  Â  const receiverSocketId = getReceiverSocketId(receiverId);
Â  Â  const senderSocketId = getReceiverSocketId(senderId);
Â  Â  
Â  Â  if (receiverSocketId) {
Â  Â  Â  io.to(receiverSocketId).emit("newMessage", populatedMessage);
Â  Â  }
Â  Â  
Â  Â  if (senderSocketId && senderSocketId !== receiverSocketId) { // âœ… FIX: Broadcast message to the sender's own socket if they have multiple tabs open
Â  Â  Â  io.to(senderSocketId).emit("newMessage", populatedMessage);
Â  Â  }

Â  Â  res.status(201).json(populatedMessage);
Â  } catch (error) {
Â  Â  console.error("Send message error:", error);
Â  Â  res.status(500).json({ error: "Internal server error" });
Â  }
};

export const reactToMessage = async (req, res) => {
Â  const { id: messageId } = req.params;
Â  const { emoji } = req.body;
Â  const userId = req.user._id;

Â  try {
Â  Â  const message = await Message.findById(messageId);
Â  Â  if (!message) return res.status(404).json({ message: "Message not found" });

Â  Â  const existingIndex = message.reactions.findIndex(
Â  Â  Â  (r) => r.userId.toString() === userId.toString()
Â  Â  );

Â  Â  if (existingIndex !== -1) {
Â  Â  Â  const current = message.reactions[existingIndex];
Â  Â  Â  if (current.emoji === emoji) {
Â  Â  Â  Â  message.reactions.splice(existingIndex, 1);
Â  Â  Â  } else {
Â  Â  Â  Â  message.reactions[existingIndex].emoji = emoji;
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  message.reactions.push({ userId, emoji });
Â  Â  }

Â  Â  await message.save();
Â  Â  await message.populate({
Â  Â  Â  path: "reactions.userId",
Â  Â  Â  select: "fullName profilePic",
Â  Â  });

Â  Â  const receiverSocketId = getReceiverSocketId(message.receiverId);
Â  Â  const senderSocketId = getReceiverSocketId(message.senderId);
Â  Â  
Â  Â  const reactionData = {
Â  Â  Â  messageId: message._id,
Â  Â  Â  reactions: message.reactions
Â  Â  };
Â  Â  
Â  Â  if (receiverSocketId) {
Â  Â  Â  io.to(receiverSocketId).emit("messageReacted", reactionData);
Â  Â  }
Â  Â  
Â  Â  if (senderSocketId && senderSocketId !== receiverSocketId) { // âœ… FIX: Check to avoid sending to the same socket twice
Â  Â  Â  io.to(senderSocketId).emit("messageReacted", reactionData);
Â  Â  }
Â  Â  res.status(200).json(message);
Â  } catch (err) {
Â  Â  console.error("React error:", err);
Â  Â  res.status(500).json({ error: "Failed to react" });
Â  }
};

export const deleteMessage = async (req, res) => {
Â  try {
Â  Â  const { id: messageId } = req.params;
Â  Â  const userId = req.user._id;

Â  Â  const message = await Message.findById(messageId);
Â  Â  if (!message) return res.status(200).json({ deleted: true });

Â  Â  if (String(message.senderId) !== String(userId)) {
Â  Â  Â  return res.status(403).json({ error: "Unauthorized" });
Â  Â  }

Â  Â  if (message.deleted) return res.status(200).json(message);

Â  Â  // ðŸ”´ Change: Set the `deleted` flag to true, but do not clear the content here.
Â  Â  message.deleted = true;

Â  Â  await message.save();
Â  Â  await message.populate("senderId", "fullName username profilePic");
Â  Â  await message.populate("receiverId", "fullName username profilePic");

Â  Â  const receiverSocketId = getReceiverSocketId(message.receiverId);
Â  Â  const senderSocketId = getReceiverSocketId(message.senderId);

Â  Â  // âœ… FIX: Only emit the messageId to the client to update the UI
Â  Â  const dataToEmit = { messageId: message._id };
Â  Â  
Â  Â  if (receiverSocketId) {
Â  Â  Â  io.to(receiverSocketId).emit("messageDeleted", dataToEmit);
Â  Â  }
Â  Â  if (senderSocketId && senderSocketId !== receiverSocketId) { // âœ… FIX: Check to avoid sending to the same socket twice
Â  Â  Â  io.to(senderSocketId).emit("messageDeleted", dataToEmit);
Â  Â  }

Â  Â  res.status(200).json(message);
Â  } catch (error) {
Â  Â  console.error("Delete message error:", error);
Â  Â  res.status(500).json({ error: "Internal server error" });
Â  }
};